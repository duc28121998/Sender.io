{"version":3,"sources":["../node_modules/@ionic/core/dist/esm-es5/index-120c8c20.js"],"names":["KEYBOARD_DID_OPEN","KEYBOARD_DID_CLOSE","previousVisualViewport","currentVisualViewport","previousLayoutViewport","currentLayoutViewport","keyboardOpen","resetKeyboardAssist","startKeyboardAssist","win","startNativeListeners","visualViewport","copyVisualViewport","copyLayoutViewport","onresize","trackViewportChanges","keyboardDidOpen","keyboardDidResize","setKeyboardOpen","keyboardDidClose","setKeyboardClose","addEventListener","ev","fireKeyboardOpenEvent","fireKeyboardCloseEvent","scaledHeightDifference","height","scale","width","layoutViewportDidChange","innerHeight","nativeEv","keyboardHeight","CustomEvent","detail","dispatchEvent","Object","assign","Math","round","offsetTop","offsetLeft","pageTop","pageLeft","innerWidth"],"mappings":"gJAAA,umBAAIA,EAAoB,qBACpBC,EAAqB,qBAErBC,EAAyB,GACzBC,EAAwB,GACxBC,EAAyB,GACzBC,EAAwB,GACxBC,GAAe,EAKfC,EAAsB,WACxBL,EAAyB,GACzBC,EAAwB,GACxBC,EAAyB,GACzBC,EAAwB,GACxBC,GAAe,GAGbE,EAAsB,SAA6BC,GACrDC,EAAqBD,GAEhBA,EAAIE,iBAITR,EAAwBS,EAAmBH,EAAIE,gBAC/CN,EAAwBQ,EAAmBJ,GAE3CA,EAAIE,eAAeG,SAAW,WAC5BC,EAAqBN,GAEjBO,KAAqBC,EAAkBR,GACzCS,EAAgBT,GACPU,EAAiBV,IAC1BW,EAAiBX,MAWnBC,EAAuB,SAA8BD,GACvDA,EAAIY,iBAAiB,mBAAmB,SAAUC,GAChD,OAAOJ,EAAgBT,EAAKa,MAE9Bb,EAAIY,iBAAiB,mBAAmB,WACtC,OAAOD,EAAiBX,OAIxBS,EAAkB,SAAyBT,EAAKa,GAClDC,EAAsBd,EAAKa,GAC3BhB,GAAe,GAGbc,EAAmB,SAA0BX,GAC/Ce,EAAuBf,GACvBH,GAAe,GAgBbU,EAAkB,WACpB,IAAIS,GAA0BvB,EAAuBwB,OAASvB,EAAsBuB,QAAUvB,EAAsBwB,MACpH,OAAQrB,GAAgBJ,EAAuB0B,QAAUzB,EAAsByB,OAASH,EA/EjE,MA+EiHI,KAQtIZ,EAAoB,SAA2BR,GACjD,OAAOH,IAAiBa,EAAiBV,IAUvCU,EAAmB,SAA0BV,GAC/C,OAAOH,GAAgBH,EAAsBuB,SAAWjB,EAAIqB,aAW1DD,EAA0B,WAC5B,OAAOxB,EAAsBuB,QAAUxB,EAAuBwB,OAASvB,EAAsBqB,SAAWtB,EAAuBsB,QAO7HH,EAAwB,SAA+Bd,EAAKsB,GAC9D,IAAIC,EAAiBD,EAAWA,EAASC,eAAiBvB,EAAIqB,YAAc3B,EAAsBuB,OAC9FJ,EAAK,IAAIW,YAAYjC,EAAmB,CAC1CkC,OAAQ,CACNF,eAAgBA,KAGpBvB,EAAI0B,cAAcb,IAOhBE,EAAyB,SAAgCf,GAC3D,IAAIa,EAAK,IAAIW,YAAYhC,GACzBQ,EAAI0B,cAAcb,IAUhBP,EAAuB,SAA8BN,GACvDP,EAAyBkC,OAAOC,OAAO,GAAIlC,GAC3CA,EAAwBS,EAAmBH,EAAIE,gBAC/CP,EAAyBgC,OAAOC,OAAO,GAAIhC,GAC3CA,EAAwBQ,EAAmBJ,IAQzCG,EAAqB,SAA4BD,GACnD,MAAO,CACLiB,MAAOU,KAAKC,MAAM5B,EAAeiB,OACjCF,OAAQY,KAAKC,MAAM5B,EAAee,QAClCc,UAAW7B,EAAe6B,UAC1BC,WAAY9B,EAAe8B,WAC3BC,QAAS/B,EAAe+B,QACxBC,SAAUhC,EAAegC,SACzBhB,MAAOhB,EAAegB,QAStBd,EAAqB,SAA4BJ,GACnD,MAAO,CACLmB,MAAOnB,EAAImC,WACXlB,OAAQjB,EAAIqB","file":"static/js/2.5bf8b02a.chunk.js","sourcesContent":["var KEYBOARD_DID_OPEN = 'ionKeyboardDidShow';\nvar KEYBOARD_DID_CLOSE = 'ionKeyboardDidHide';\nvar KEYBOARD_THRESHOLD = 150;\nvar previousVisualViewport = {};\nvar currentVisualViewport = {};\nvar previousLayoutViewport = {};\nvar currentLayoutViewport = {};\nvar keyboardOpen = false;\n/**\n * This is only used for tests\n */\n\nvar resetKeyboardAssist = function resetKeyboardAssist() {\n  previousVisualViewport = {};\n  currentVisualViewport = {};\n  previousLayoutViewport = {};\n  currentLayoutViewport = {};\n  keyboardOpen = false;\n};\n\nvar startKeyboardAssist = function startKeyboardAssist(win) {\n  startNativeListeners(win);\n\n  if (!win.visualViewport) {\n    return;\n  }\n\n  currentVisualViewport = copyVisualViewport(win.visualViewport);\n  currentLayoutViewport = copyLayoutViewport(win);\n\n  win.visualViewport.onresize = function () {\n    trackViewportChanges(win);\n\n    if (keyboardDidOpen() || keyboardDidResize(win)) {\n      setKeyboardOpen(win);\n    } else if (keyboardDidClose(win)) {\n      setKeyboardClose(win);\n    }\n  };\n};\n/**\n * Listen for events fired by native keyboard plugin\n * in Capacitor/Cordova so devs only need to listen\n * in one place.\n */\n\n\nvar startNativeListeners = function startNativeListeners(win) {\n  win.addEventListener('keyboardDidShow', function (ev) {\n    return setKeyboardOpen(win, ev);\n  });\n  win.addEventListener('keyboardDidHide', function () {\n    return setKeyboardClose(win);\n  });\n};\n\nvar setKeyboardOpen = function setKeyboardOpen(win, ev) {\n  fireKeyboardOpenEvent(win, ev);\n  keyboardOpen = true;\n};\n\nvar setKeyboardClose = function setKeyboardClose(win) {\n  fireKeyboardCloseEvent(win);\n  keyboardOpen = false;\n};\n/**\n * Returns `true` if the `keyboardOpen` flag is not\n * set, the previous visual viewport width equal the current\n * visual viewport width, and if the scaled difference\n * of the previous visual viewport height minus the current\n * visual viewport height is greater than KEYBOARD_THRESHOLD\n *\n * We need to be able to accomodate users who have zooming\n * enabled in their browser (or have zoomed in manually) which\n * is why we take into account the current visual viewport's\n * scale value.\n */\n\n\nvar keyboardDidOpen = function keyboardDidOpen() {\n  var scaledHeightDifference = (previousVisualViewport.height - currentVisualViewport.height) * currentVisualViewport.scale;\n  return !keyboardOpen && previousVisualViewport.width === currentVisualViewport.width && scaledHeightDifference > KEYBOARD_THRESHOLD && !layoutViewportDidChange();\n};\n/**\n * Returns `true` if the keyboard is open,\n * but the keyboard did not close\n */\n\n\nvar keyboardDidResize = function keyboardDidResize(win) {\n  return keyboardOpen && !keyboardDidClose(win);\n};\n/**\n * Determine if the keyboard was closed\n * Returns `true` if the `keyboardOpen` flag is set and\n * the current visual viewport height equals the\n * layout viewport height.\n */\n\n\nvar keyboardDidClose = function keyboardDidClose(win) {\n  return keyboardOpen && currentVisualViewport.height === win.innerHeight;\n};\n/**\n * Determine if the layout viewport has\n * changed since the last visual viewport change.\n * It is rare that a layout viewport change is not\n * associated with a visual viewport change so we\n * want to make sure we don't get any false positives.\n */\n\n\nvar layoutViewportDidChange = function layoutViewportDidChange() {\n  return currentLayoutViewport.width !== previousLayoutViewport.width || currentLayoutViewport.height !== previousLayoutViewport.height;\n};\n/**\n * Dispatch a keyboard open event\n */\n\n\nvar fireKeyboardOpenEvent = function fireKeyboardOpenEvent(win, nativeEv) {\n  var keyboardHeight = nativeEv ? nativeEv.keyboardHeight : win.innerHeight - currentVisualViewport.height;\n  var ev = new CustomEvent(KEYBOARD_DID_OPEN, {\n    detail: {\n      keyboardHeight: keyboardHeight\n    }\n  });\n  win.dispatchEvent(ev);\n};\n/**\n * Dispatch a keyboard close event\n */\n\n\nvar fireKeyboardCloseEvent = function fireKeyboardCloseEvent(win) {\n  var ev = new CustomEvent(KEYBOARD_DID_CLOSE);\n  win.dispatchEvent(ev);\n};\n/**\n * Given a window object, create a copy of\n * the current visual and layout viewport states\n * while also preserving the previous visual and\n * layout viewport states\n */\n\n\nvar trackViewportChanges = function trackViewportChanges(win) {\n  previousVisualViewport = Object.assign({}, currentVisualViewport);\n  currentVisualViewport = copyVisualViewport(win.visualViewport);\n  previousLayoutViewport = Object.assign({}, currentLayoutViewport);\n  currentLayoutViewport = copyLayoutViewport(win);\n};\n/**\n * Creates a deep copy of the visual viewport\n * at a given state\n */\n\n\nvar copyVisualViewport = function copyVisualViewport(visualViewport) {\n  return {\n    width: Math.round(visualViewport.width),\n    height: Math.round(visualViewport.height),\n    offsetTop: visualViewport.offsetTop,\n    offsetLeft: visualViewport.offsetLeft,\n    pageTop: visualViewport.pageTop,\n    pageLeft: visualViewport.pageLeft,\n    scale: visualViewport.scale\n  };\n};\n/**\n * Creates a deep copy of the layout viewport\n * at a given state\n */\n\n\nvar copyLayoutViewport = function copyLayoutViewport(win) {\n  return {\n    width: win.innerWidth,\n    height: win.innerHeight\n  };\n};\n\nexport { KEYBOARD_DID_CLOSE, KEYBOARD_DID_OPEN, copyLayoutViewport, copyVisualViewport, keyboardDidClose, keyboardDidOpen, keyboardDidResize, resetKeyboardAssist, setKeyboardClose, setKeyboardOpen, startKeyboardAssist, trackViewportChanges };"],"sourceRoot":""}